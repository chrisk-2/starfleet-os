name: Build Starfleet ISOs

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "README.md"
      - "**/*.md"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  verify:
    name: Verify repo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run repo verifier
        run: |
          chmod +x scripts/verify_repo.sh || true
          bash scripts/verify_repo.sh

  build-iso:
    name: Build ISO (${{ matrix.role }})
    needs: verify
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        role: [control, drone, server]

    steps:
      - uses: actions/checkout@v4

      - name: Install Arch ISO build deps (Docker-based)
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Run build inside Archlinux container
        # We run Arch tooling in an Arch container for consistency
        run: |
          set -euo pipefail
          cat > Dockerfile <<'EOF'
          FROM archlinux:latest
          RUN pacman -Syu --noconfirm \
              archiso git base-devel sudo which
          # Avoid 'nobody' permission surprises; create runner user with sudo
          RUN useradd -m builder && echo "builder ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/99_builder
          USER builder
          WORKDIR /home/builder/work
          EOF

          docker build -t starfleet-archiso:latest .
          # Mount workspace read-write
          docker run --rm -v "$PWD":/home/builder/work starfleet-archiso:latest bash -lc '
            set -euo pipefail
            chmod +x scripts/merge_role.sh scripts/build_iso_local.sh || true
            # sanity: show role
            echo "== Building role: ${{ matrix.role }} =="
            ./scripts/build_iso_local.sh "${{ matrix.role }}"
          '

      - name: Collect ISO artifact(s)
        # Expect your build script to write into ./out or similar; adjust if different
        run: |
          mkdir -p artifacts
          # grab common output paths; tweak as needed to match your script
          if ls out/*.iso >/dev/null 2>&1; then
            cp out/*.iso "artifacts/"
          elif ls *.iso >/dev/null 2>&1; then
            cp *.iso "artifacts/"
          else
            echo "No ISO found. Check build logs."
            exit 1
          fi
          ls -lh artifacts

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: starfleet-${{ matrix.role }}-iso
          path: artifacts/*.iso
          if-no-files-found: error
