#!/usr/bin/env bash
# scripts/verify_repo.sh
# Starfleet OS repo verifier — audits structure, roles, firstboot, archiso bits, CI presence.
# Usage:
#   ./scripts/verify_repo.sh [--fix] [--no-strict] [--role server,control,drone]
set -euo pipefail

### -------- CLI & setup --------
FIX=0
STRICT=1
ROLE_FILTER=""

for a in "$@"; do
  case "$a" in
    --fix) FIX=1 ;;
    --no-strict) STRICT=0 ;;
    --role=*) ROLE_FILTER="${a#--role=}" ;;
    *) echo "Unknown arg: $a" >&2; exit 2 ;;
  case_esac=
  esac
done

# Colors
c_red() { printf "\e[31m%s\e[0m\n" "$*"; }
c_grn() { printf "\e[32m%s\e[0m\n" "$*"; }
c_ylw() { printf "\e[33m%s\e[0m\n" "$*"; }
c_blu() { printf "\e[34m%s\e[0m\n" "$*"; }
c_mag() { printf "\e[35m%s\e[0m\n" "$*"; }

PASS=()
WARN=()
FAIL=()

add_pass(){ PASS+=("$1"); }
add_warn(){ WARN+=("$1"); }
add_fail(){ FAIL+=("$1"); }

# Root of repo (works even if not a git repo)
ROOT="${ROOT_OVERRIDE:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}"
cd "$ROOT"

### -------- helpers --------
need_bins=(awk sed grep sort uniq xargs find bash)
for b in "${need_bins[@]}"; do
  if ! command -v "$b" >/dev/null 2>&1; then
    add_fail "Missing required tool: $b"
  fi
done

have(){ command -v "$1" >/dev/null 2>&1; }

fix_perm_exec(){
  local p="$1"
  [[ -f "$p" ]] || return 0
  if [[ ! -x "$p" && $FIX -eq 1 ]]; then chmod +x "$p"; fi
  [[ -x "$p" ]] && add_pass "exec bit set: $p" || add_warn "not executable: $p"
}

ensure_shebang(){
  local p="$1"
  [[ -f "$p" ]] || return 0
  if ! head -n1 "$p" | grep -qE '^#!/'; then
    if [[ $FIX -eq 1 ]]; then
      { printf '%s\n' '#!/usr/bin/env bash'; cat "$p"; } > "$p.tmp" && mv "$p.tmp" "$p"
      add_pass "added shebang to: $p"
    else
      add_warn "missing shebang: $p"
    fi
  else
    add_pass "shebang ok: $p"
  fi
}

exists_dir(){ [[ -d "$1" ]]; }
exists_file(){ [[ -f "$1" ]]; }

### -------- 1) Top-level structure --------
c_blu "== Top-level structure =="
required_dirs=(archiso roles scripts system)
for d in "${required_dirs[@]}"; do
  if exists_dir "$d"; then add_pass "dir present: $d"; else add_fail "missing dir: $d"; fi
done

# Optional: .github/workflows
if exists_file ".github/workflows/build-iso.yml"; then
  add_pass "CI workflow found: .github/workflows/build-iso.yml"
else
  add_warn "CI workflow missing: .github/workflows/build-iso.yml"
fi

### -------- 2) ArchISO base/profile skeleton --------
c_blu "== ArchISO base/profile =="
BASE="archiso/base"
PROFILE="archiso/profiles/starfleet"

if exists_dir "$BASE"; then
  add_pass "base profile dir: $BASE"
  for f in "$BASE/profiledef.sh" "$BASE/packages.x86_64"; do
    if exists_file "$f"; then add_pass "base file present: $f"; else add_warn "base file missing: $f"; fi
  done
  # profiledef.sh syntax
  if exists_file "$BASE/profiledef.sh" && have bash; then
    if bash -n "$BASE/profiledef.sh" 2>/dev/null; then
      add_pass "profiledef.sh syntax ok"
    else
      add_fail "profiledef.sh has syntax errors"
    fi
  fi
else
  add_warn "base profile dir missing: $BASE (merge will scaffold minimal fallback)"
fi

if exists_dir "$PROFILE"; then
  add_pass "composed profile output dir present: $PROFILE (generated by merge_role.sh)"
else
  add_warn "composed profile not yet generated: $PROFILE (run scripts/merge_role.sh <role>)"
fi

### -------- 3) Roles sanity --------
c_blu "== Roles =="
default_roles=(server control drone)
IFS=',' read -r -a roles <<< "${ROLE_FILTER:-${default_roles[*]}}"

for r in "${roles[@]}"; do
  rdir="roles/$r"
  if ! exists_dir "$rdir"; then
    add_fail "role dir missing: $rdir"
    continue
  fi
  add_pass "role dir present: $rdir"

  # packages.txt
  pfile="$rdir/packages.txt"
  if exists_file "$pfile"; then
    # basic validation: non-empty, no spaces in pkg name, allow comments and blanks
    bad_lines=$(awk '
      NF && $1 !~ /^#/ {
        if ($1 ~ /[^A-Za-z0-9@._+-]/) { print NR ":" $0 }
      }' "$pfile" || true)
    if [[ -n "$bad_lines" ]]; then
      add_fail "invalid package tokens in $pfile (line:content): ${bad_lines//$'\n'/; }"
    else
      # dedup check
      dups=$(awk 'NF && $1 !~ /^#/ {print $1}' "$pfile" | sort | uniq -d || true)
      if [[ -n "$dups" ]]; then
        add_warn "duplicate package entries in $pfile: ${dups//$'\n'/, }"
      else
        add_pass "packages.txt valid: $pfile"
      fi
    fi
  else
    add_fail "missing packages.txt for role $r: $pfile"
  fi

  # overlay dir
  odir="$rdir/overlay"
  if exists_dir "$odir"; then
    add_pass "overlay present: $odir"
  else
    add_warn "overlay missing (ok if role is package-only): $odir"
  fi
done

### -------- 4) Firstboot unit & script --------
c_blu "== Firstboot (system/firstboot) =="
fdir="system/firstboot"
unit="$fdir/starfleet-firstboot.service"
script="$fdir/starfleet-firstboot.sh"

if exists_dir "$fdir"; then
  add_pass "firstboot dir present: $fdir"
else
  add_warn "firstboot dir missing: $fdir"
fi

if exists_file "$unit"; then
  add_pass "firstboot unit present: $unit"
  # lightweight checks
  if grep -q '^\[Unit\]' "$unit" && grep -q '^\[Service\]' "$unit" && grep -q '^\[Install\]' "$unit"; then
    add_pass "unit has required sections"
  else
    add_fail "unit missing required sections (Unit/Service/Install)"
  fi
  if have systemd-analyze; then
    if systemd-analyze verify "$unit" >/dev/null 2>&1; then
      add_pass "systemd-analyze verify ok"
    else
      add_warn "systemd-analyze reported issues on unit (check logs)"
    fi
  fi
else
  add_warn "firstboot unit missing: $unit"
fi

if exists_file "$script"; then
  fix_perm_exec "$script"
  ensure_shebang "$script"
else
  add_warn "firstboot script missing: $script"
fi

### -------- 5) Required scripts presence --------
c_blu "== Repo scripts =="
for s in scripts/merge_role.sh scripts/build_iso_local.sh scripts/verify_repo.sh; do
  if exists_file "$s"; then
    add_pass "script present: $s"
    [[ "$s" == *".sh" ]] && { fix_perm_exec "$s"; ensure_shebang "$s"; }
  else
    add_warn "script missing: $s"
  fi
done

### -------- 6) ArchISO tool check --------
c_blu "== ArchISO tooling =="
if have mkarchiso; then
  add_pass "mkarchiso present on host"
else
  add_warn "mkarchiso not found on host (ok if you build via Docker/CI). On Arch: sudo pacman -S archiso"
fi

### -------- 7) Summary --------
echo
c_mag "======== VERIFY SUMMARY ========"
if ((${#PASS[@]})); then
  c_grn "PASS:"
  for m in "${PASS[@]}"; do printf "  • %s\n" "$m"; done
fi
if ((${#WARN[@]})); then
  c_ylw "WARN:"
  for m in "${WARN[@]}"; do printf "  • %s\n" "$m"; done
fi
if ((${#FAIL[@]})); then
  c_red "FAIL:"
  for m in "${FAIL[@]}"; do printf "  • %s\n" "$m"; endone=
  done
fi

# Exit code logic
if ((${#FAIL[@]})); then
  if [[ $STRICT -eq 1 ]]; then
    c_red "Exit: FAIL (strict mode). Fix above or re-run with --no-strict."
    exit 1
  else
    c_ylw "Exit: WARN (non-strict)."
    exit 0
  fi
else
  c_grn "Exit: OK"
  exit 0
fi
